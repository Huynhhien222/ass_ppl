    def test_online_4(self):
        # input = Program([FuncDecl(Id("main"),[],[VarDecl(Id("a"),IntType())],[Assign(Id("a"),BinaryOp('+',BinaryOp( '-',IntLiteral(10),BinaryOp('*',IntLiteral(9),IntLiteral(8))),BinaryOp('DIV',IntLiteral(6),IntLiteral(4)))),CallStmt(Id("putInt"),[Id("a")]),Return(None)],VoidType())])
        input = """
        procedure main();
        var a: integer;
        begin
            a :=(10 - 9*8) + (6 div 4);
            putInt(a);
        end
        """
        expect = "-61"
        self.assertTrue(TestCodeGen.test(input, expect, 547))
   
    def test_online_11(self):
        input = Program([VarDecl(Id("a"),IntType()),
        VarDecl(Id("b"),IntType()),
        VarDecl(Id("c"),IntType()),
        FuncDecl(Id("main"),[],[],
        [Assign(Id("a"),IntLiteral(1)),
        If(BinaryOp('=',Id("a"),IntLiteral(1)),
        [With([VarDecl(Id("a"),IntType())],
        [For(Id("a"),IntLiteral(2),IntLiteral(3),True,
        [With([VarDecl(Id("b"),IntType())],
        [CallStmt(Id("putIntLn"),[Id("a")])])])])],
        [With([VarDecl(Id("a"),IntType())],
        [For(Id("a"),IntLiteral(7),IntLiteral(8),True,
        [With([VarDecl(Id("b"),IntType())],
        [CallStmt(Id("putIntLn"),[Id("a")])])])])]),
        With([VarDecl(Id("c"),IntType())],
        [CallStmt(Id("putInt"),[Id("a")])]),
        Return(None)],VoidType())])
        expect = "2\n3\n1"
        self.assertTrue(TestCodeGen.test(input, expect, 548))

    def test_online_12(self):
        input = """
        var m: array [1 .. 10] of integer;
        procedure main();
        begin
            m[1] := 5;
            putInt(m[1]);
        end"""
        expect = "5"
        self.assertTrue(TestCodeGen.test(input, expect, 549))
    
    def test_online_13(self):
        input = """
        function mean(size:integer): real;
        var i,s: integer;
            x: array [1 .. 3] of integer;
        begin
            x[3] := 1;
            x[1] := 3;
            x[2] := 5;
            s := 0;
            for i := 1 to size do
                begin
                    s := s + x[i];
                end
            return (s + 0.0 ) / size;
        end
        procedure main();
        begin
            putFloat(mean(3));
        end
        """
        expect = "3.0"
        self.assertTrue(TestCodeGen.test(input, expect, 548))

    def test_online_14(self):
        input = """
        function searchArr(m: array [1 .. 5] of integer; a,n : integer): integer;
        var i :integer;
        begin
            for i:=1 to n do begin
                if m[i] = a then
                    return i;
            end
            return -1;
        end
        procedure main();
        var j,result: integer;
            arr: array [1 .. 5] of integer;
        begin
            for j := 1 to 5 do
            begin
                arr[j] := j + 1;
            end
            result := searchArr(arr, 3, 5);
            putInt(result);
        end
        """
        expect = "2"
        self.assertTrue(TestCodeGen.test(input, expect, 548))

    def test_online_15(self):
        input = """
        var arr: array [1 .. 5] of integer;
        function searchArr(d: array [1 .. 5] of integer; a, n: integer): integer;
        var i: integer;
        begin
            for i := 1 to n do begin
                d[i] := i;
            end
            return arr[1];
        end
        procedure main();
        var j, result: integer;
        begin
            arr[1] := 5;
            arr[2] := 3;
            arr[3] := 11;
            arr[4] := 19;
            arr[5] := 20;
            result := searchArr(arr, 3, 5);
            putInt(result);
        end
        """
        expect = "1"
        self.assertTrue(TestCodeGen.test(input, expect, 549))